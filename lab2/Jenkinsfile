pipeline {
  
  // Lab 2
  // let's check SBOMs for forbidden packages
  
  environment {
    //
    // this should be fairly unique, it doesn't need to be perfect
    // since we're not going to push this anywhere
    //
    IMAGE = "${JOB_BASE_NAME}:${BUILD_NUMBER}"
  } // end environment
  
  agent any
  stages {
    
    stage('Checkout SCM') {
      steps {
        checkout scm
      } // end steps
    } // end stage "checkout scm"

    stage('Install and Verify Tools') {
      steps {
        sh '''
          ### if docker isn't available, just bail 
          ### (correcting this is a bigger problem outside the scope of this workshop)
          which docker   
          ### make sure syft is available, and if not, download and install 
          if [ ! $(which syft) ]; then
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b ${HOME}/.local/bin
          fi
          ### same for grype
          if [ ! $(which grype) ]; then
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b ${HOME}/.local/bin
          fi
          PATH=${HOME}/.local/bin:${PATH}
          # setting PATH here isn't really necessary since we're just going to exit this sh step anyway but it's
          # a good reminder that it needs to be done when we actually need syft and grype
          #
          # also, we can go ahead and sanity check that the tools were installed correctly:
          which syft
          which grype
        '''
      } // end steps
    } // end stage "install and verify tools"
        
    stage('Build image and tag with build number') {
      steps {
        sh '''
          docker build --network=host -t ${IMAGE} .
        '''  
      } // end steps
    } // end stage "build image and tag w build number"
        
    stage('Analyze with syft') {
      steps {
        // run syft, output in both json and text formats
        //
        // note: setting PATH here like this will work regardless of whether syft/grype 
        // were installed before we ran this pipeline or during the pipeline execution
        sh '''
          # first, let's make sure there's no old sboms laying around (just so our build artifacts are clean)
          rm -f *sbom*
          # set the PATH just to be sure
          PATH=${HOME}/.local/bin:${PATH}
          # run syft and output both json and text files.
          syft --output json=${IMAGE}-sbom.json --output table=${IMAGE}-sbom.txt ${IMAGE} 
        '''
      } // end steps
    } // end stage "analyze with syft"
    
    //
    //
    // NEW in this lab!
    // check for forbidden pacakges
    //

    stage('Package Check') {
      steps {
        // all we need to do is put all the package names on one line and then grep -v
        // the awk extracts just the package names
        // tr converts newlines to spaces (puts e
        // note: as written this is just a partial match
        sh '''          
          #awk '{print $1}' ${IMAGE}-sbom.txt | tr "\n" " " | grep -qv curl
          jq -r '.artifacts[].name' | tr "\n" " " | grep -qv curl
        '''
      } // end steps
    } // end stage "Package check"


    stage('Archive SBOMs') {
      steps {
        // archive anything with "sbom" in the name
        archiveArtifacts artifacts: '*sbom*'
        // and, just to be sure, let's clean up after ourselves, 
        // remove any sboms we've created from the workspace
        sh 'rm -f *sbom*'
      } // end steps
    } // end stage "Archive SBOMs"

    
  } // end stages

} //end pipeline
