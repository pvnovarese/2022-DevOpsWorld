pipeline {
  
  environment {
    //
    // this should be fairly unique, it doesn't need to be perfect
    // since we're not going to push this anywhere
    //
    IMAGE = "${JOB_BASE_NAME}:${BUILD_NUMBER}"
  } // end environment
  
  agent any
  stages {
    
    stage('Checkout SCM') {
      steps {
        checkout scm
      } // end steps
    } // end stage "checkout scm"

    stage('Install and Verify Tools') {
      steps {
        sh '''
          ### if docker isn't available, just bail 
          ### (correcting this is a bigger problem outside the scope of this workshop)
          which docker   
          ### make sure syft is available, and if not, download and install 
          if [ ! $(which syft) ]; then
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b ${HOME}/.local/bin
          fi
          ### same for grype
          if [ ! $(which grype) ]; then
            curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b ${HOME}/.local/bin
          fi
          PATH=${HOME}/.local/bin:${PATH}
          # setting PATH here isn't really necessary since we're just going to exit this sh step anyway but it's
          # a good reminder that it needs to be done when we actually need syft and grype
          #
          # also, we can go ahead and sanity check that the tools were installed correctly:
          which syft
          which grype
          # finally, let's make sure there's no old sboms laying around (just so our build artifacts are clean)
          rm -f *sbom*
        '''
      } // end steps
    } // end stage "install and verify tools"
    
    stage('Build image and tag with build number') {
      steps {
        sh '''
          docker build --network=host -t ${IMAGE} .
        '''  
      } // end steps
    } // end stage "build image and tag w build number"
    
    stage('Analyze with syft') {
      steps {
        // run syft, output in json format, save to file "sbom.json"
        // note: setting PATH here like this will work regardless of whether syft/grype 
        // were installed before we ran this pipeline or during the pipeline execution
        sh '''
          # set the PATH just to be sure
          PATH=${HOME}/.local/bin:${PATH}
          # run syft and output both json and text files.
          syft --output json=${IMAGE}-sbom.json --output table=${IMAGE}-sbom.txt --output spdx-json=${IMAGE}-spdx-sbom.json --output cyclonedx-json=${IMAGE}-cyclonedx-sbom.json ${IMAGE}         '''
      } // end steps
    } // end stage "analyze with syft"
    
    stage('Evaluate SBOM with grype') {
      steps {
        // run grype, read sbom from json sbom, output in json and table format. 
        // we will pipe text output to "tee" so we can save the report AND see it in the logs
        // we could instead just use "--file" option for grype if we just want to silenty archive results
        sh '''
          PATH=${HOME}/.local/bin:${PATH}
          #
          ### first option is for just failing on ANY critical vuln.  This is built into grype and is pretty simple.
          #
          ### we need to set -o pipefail here so the pipe to tee doesn't mask any error from grype
          # set -o pipefail
          # grype --fail-on critical --output json=grype-${IMAGE}-sbom.json --output table sbom:${IMAGE}-sbom.json | tee grype-${IMAGE}-sbom.txt
          #
          ### second option is to check for vulns that are critical AND have published fixes.  This is a bit more complex
          #
          grype --output json sbom:${IMAGE}-sbom.json | jq -r '.matches[] | select (.vulnerability.severity == "Critical") | select (.vulnerability.fix.versions | length > 0 ) | .vulnerability.id, .artifact.name, .artifact.version, .vulnerability.severity, .vulnerability.fix.versions' | tee ${IMAGE}-sbom-punchlist.txt
          # now check, if the file exists, we break the pipeline.
          if [ -s ${IMAGE}-sbom-punchlist.txt ] ; then
            echo "ERROR: Critical vulnerabilities with known fixes have been detected."
            exit 1
          else
            echo "No critical vulnerabilities with known fixes detected."
          fi
        '''
      } // end steps
    } // end stage "Evaluate with grype"
    

  } // end stages
  
  post {
    always {
      // archive the sbom
      archiveArtifacts artifacts: '*sbom*'
      // and, just to be sure, let's clean up after ourselves, 
      // remove any sboms we've created from the workspace
      sh 'rm -f *sbom*'
    } // end always
  } //end post

} //end pipeline

